"""
Дадена е nxn табла за шах. Треба да се постават n кралици на таблата така што ниедна кралица да не се напаѓа.
Кралиците може да се постават на било која позиција која сметаме дека е најсоодветна.
Единственото ограничување е дека не треба да се напаѓаат.
На влез се прима бројот на кралици и димензии на таблата n. На излез треба да се испечати бројот на решенија кои ви ги дава решението
со default Backtracking Solver ако бројот на кралици е помал или еднаков на 6. Во спротивно да се испечати само првото решение.

Забелешка: За кралиците да не се напаѓаат треба да се провери нивната редица, колона или дијагонала.
Не е задолжително да ви поминуваат последните два тест примери за задачата да биде точна. Зависи како сте ги поставиле условите.

Sample input
4

Sample output
48
"""
from constraint import *

if __name__ == '__main__':
    problem = Problem()
    n = int(input())
    domain = [(i, j) for i in range(0, n) for j in range(0, n)]

    queens = range(0, n)

    problem.addVariables(queens, domain)

    for queen1 in queens:
        for queen2 in queens:
            if queen1 < queen2:
                problem.addConstraint(lambda q1, q2: q1[0] != q2[0] and q1[1] != q2[1] and \
                                      q1[0]+q1[1] != q2[0]+q2[1] and \
                                      q1[0]-q2[0] != q1[1]-q2[1], (queen1, queen2))

    solution = problem.getSolutions()
    if n <= 6:
        print(len(solution))
    else:
        print(solution[0])
