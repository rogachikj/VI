"""
Дадена ви е играта судоку. Во оваа игра во секој блок се ставаат бројки од 1 до 9 така што во ниедна редица,
колона и блок не смее да се повторува ниедна цифра. Почетно сите полиња се празни. Вашата задача е да најдете решение на овој проблем.

Забелешка: На влез добивате со каков Solver да работите. Испечатете го само првото решение.
Не е задолжително да ви поминуваат сите тест примери за задачата да биде точна. Зависи како сте ги поставиле условите.

Sample input
BacktrackingSolver

Sample output
{0: 9, 1: 8, 2: 7, 3: 6, 4: 5, 5: 4, 6: 3, 7: 2, 8: 1, 9: 6, 10: 5, 11: 4, 15: 9, 16: 8, 17: 7, 12: 3, 13: 2, 14: 1, 18: 3, 19: 2,
20: 1, 21: 9, 22: 8, 23: 7, 24: 6, 25: 5, 26: 4, 27: 8, 29: 9, 32: 6, 35: 5, 28: 7, 30: 4, 31: 3, 34: 1, 33: 2, 40: 9, 49: 7, 51: 8,
42: 7, 44: 6, 43: 4, 37: 3, 38: 5, 36: 2, 41: 8, 39: 1, 47: 6, 45: 4, 46: 1, 48: 5, 50: 2, 52: 9, 53: 3, 54: 7, 57: 8, 56: 3, 61: 6,
55: 9, 59: 5, 62: 2, 58: 4, 60: 1, 63: 5, 69: 4, 64: 6, 67: 1, 72: 1, 73: 4, 76: 6, 78: 5, 65: 8, 71: 9, 68: 3, 70: 7, 66: 2, 74: 2,
75: 7, 77: 9, 79: 3, 80: 8}
"""

from constraint import *

def choose_cube(rows, columns):
    if rows in range(0, 3):
        if columns in range(0, 3):
            return 1
        if columns in range(3, 6):
            return 2
        if columns in range(6, 9):
            return 3
    if rows in range(3, 6):
        if columns in range(0, 3):
            return 4
        if columns in range(3, 6):
            return 5
        if columns in range(6, 9):
            return 6
    if rows in range(6, 9):
        if columns in range(0, 3):
            return 7
        if columns in range(3, 6):
            return 8
        if columns in range(6, 9):
            return 9

if __name__ == '__main__':
    solver = input()
    if solver == 'RecursiveBacktrackingSolver':
        problem = Problem(RecursiveBacktrackingSolver())
    if solver == 'BacktrackingSolver':
        problem = Problem(BacktrackingSolver())
    if solver == 'MinConflictsSolver':
        problem = Problem(MinConflictsSolver())

    variables = range(0, 81)
    domain = range(1, 10)

    problem.addVariables(variables, domain)
    for i in range(0, 81):
        for j in range(0, 81):
            if i < j:
                if i // 9 == j // 9:
                    problem.addConstraint(lambda s1, s2: s1 != s2, (i, j))
                if i % 9 == j % 9:
                    problem.addConstraint(lambda s1, s2: s1 != s2, (i, j))
                i_cube = choose_cube((i % 9),(i // 9))
                j_cube = choose_cube((j % 9),(j // 9))
                if i_cube == j_cube:
                    problem.addConstraint(lambda s1, s2: s1 != s2, (i, j))


    solution = problem.getSolution()
    print(solution)
