"""
Овој проблем се базира на играта Minesweeper.
Креирајте функција која како влез зема листа од # и -, каде што секој хаш знак (#) претставува мина, а секоја цртичка (-) претставува поле
без мина. Функцијата треба да враќа листа каде што секоја цртичка е заменета со бројка која го претставува бројот на мини од најблиските
полиња на моменталното поле (хоризонтално, вертикално, и дијагонално).
Листата која се враќа на излез креирајте ја со пристапот list comprehension.
Од стандарден влез е дадена големината на полето N (полето е со димензии NxN), како и репрезентацијата на полето со # и -.
Потребно е да направите репрезентација на полето преку листа од листи, каде што елементите се # и -.
Оваа листа е влез на претходно дефинираната функција, а излезот од функцијата е потребно да се испечати од стандарден влез.

Помош: влезот е зададен ред по ред за секоја редица во полето, додека индивидуалните елементи се одвоени со 3 празни места.
За да се одделат елементите со 3 празни места, може да ја искористите функцијата split() дефинирана на стрингови.
За печатење на излезот може да ја користите функцијата join() дефинирана на стрингови.

Sample input
5
-   -   -   -   -
-   -   -   -   -
-   -   #   -   -
-   -   -   -   -
-   -   -   -   -

Sample output
0   0   0   0   0
0   1   1   1   0
0   1   #   1   0
0   1   1   1   0
0   0   0   0   0
"""


def conversion(matrix, n):
    final_matr = [[izbroj(matrix, i, j, n) for j in range(n)] for i in range(0, n)]
    # pechatenje = ""
    # for i in range(n):
    #     pechatenje = pechatenje + "   ".join(map(str, final_matr[i]))
    #     pechatenje = pechatenje + "\n"
    #↑↑↑ ALTERNATIVEN NACHIN BEZ LIST COMPERHANSION ZA PECHATENJE NA FINALNOTO RESHENIE
    pechatenje = "\n".join(["   ".join(map(str, x)) for x in final_matr])
    return pechatenje


def izbroj(matr, ii, jj, nn):
    brojach = 0;
    if (matr[ii][jj] == "#"):
        return "#"
    if (ii > 0 and matr[ii - 1][jj] == "#"):
        brojach = brojach + 1
    if (ii > 0 and jj > 0 and matr[ii - 1][jj - 1] == "#"):
        brojach = brojach + 1
    if (ii < nn - 1 and matr[ii + 1][jj] == "#"):
        brojach = brojach + 1
    if (ii < nn - 1 and jj < nn - 1 and matr[ii + 1][jj + 1] == "#"):
        brojach = brojach + 1
    if (jj > 0 and matr[ii][jj - 1] == "#"):
        brojach = brojach + 1
    if (jj < nn - 1 and matr[ii][jj + 1] == "#"):
        brojach = brojach + 1
    if (ii > 0 and jj < nn - 1 and matr[ii - 1][jj + 1] == "#"):
        brojach = brojach + 1
    if (ii < nn - 1 and jj > 0 and matr[ii + 1][jj - 1] == "#"):
        brojach = brojach + 1
    return brojach


if __name__ == '__main__':
    n = int(input())

    matrix = []
    for i in range(0, n):
        matrix_row = [el for el in input().split("   ")]
        matrix.append(matrix_row)

    print(conversion(matrix, n))
